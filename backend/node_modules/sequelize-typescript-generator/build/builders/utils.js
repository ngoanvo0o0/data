"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateArrowDecorator = exports.generateObjectLiteralDecorator = exports.generateIndexExport = exports.generateNamedImports = exports.nodeToString = void 0;
const ts = __importStar(require("typescript"));
const printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed });
/**
 * Returns string representation of typescript node
 * @param node
 * @returns {string}
 */
const nodeToString = (node) => {
    const sourceFile = ts.createSourceFile(`source.ts`, ``, ts.ScriptTarget.Latest, false, ts.ScriptKind.TS);
    return printer.printNode(ts.EmitHint.Unspecified, node, sourceFile);
};
exports.nodeToString = nodeToString;
/**
 * Generate named imports code (e.g. `import { Something, Else } from "module"`)
 * @param {string[]} importsSpecifier
 * @param {string} moduleSpecifier
 * @returns {string} Named import code
 */
const generateNamedImports = (importsSpecifier, moduleSpecifier) => {
    return ts.createImportDeclaration(
    /* decorators */ undefined, 
    /* modifiers */ undefined, ts.createImportClause(undefined, ts.createNamedImports([
        ...importsSpecifier
            .map(is => ts.createImportSpecifier(undefined, ts.createIdentifier(is)))
    ])), ts.createLiteral(moduleSpecifier));
};
exports.generateNamedImports = generateNamedImports;
/**
 * Generate model export for index file
 * @param {string} modelFileName
 * @returns {ts.ExportDeclaration}
 */
const generateIndexExport = (modelFileName) => {
    return ts.createExportDeclaration([], undefined, undefined, ts.createLiteral(`./${modelFileName}`));
};
exports.generateIndexExport = generateIndexExport;
/**
 * Generate object literal decorator
 * @param {string} decoratorIdentifier
 * @param {[key: string]: any} props
 * @return {ts.Decorator}
 */
const generateObjectLiteralDecorator = (decoratorIdentifier, props) => {
    return ts.createDecorator(ts.createCall(ts.createIdentifier(decoratorIdentifier), undefined, [
        ts.createObjectLiteral([
            ...Object.entries(props)
                .map(e => ts.createPropertyAssignment(e[0], typeof e[1] === 'string' && (e[1].startsWith('DataType.') || e[1].startsWith('Sequelize.')) ? ts.createIdentifier(e[1]) : ts.createLiteral(e[1])))
        ])
    ]));
};
exports.generateObjectLiteralDecorator = generateObjectLiteralDecorator;
/**
 * Generate arrow decorator
 * @param {string} decoratorIdentifier
 * @param {string[]} arrowTargetIdentifiers
 * @param {object} objectLiteralProps
 * @returns {ts.Decorator}
 */
const generateArrowDecorator = (decoratorIdentifier, arrowTargetIdentifiers, objectLiteralProps) => {
    const argumentsArray = arrowTargetIdentifiers.map(t => ts.createArrowFunction(undefined, undefined, [], undefined, ts.createToken(ts.SyntaxKind.EqualsGreaterThanToken), ts.createIdentifier(t)));
    objectLiteralProps && argumentsArray.push(ts.createObjectLiteral([
        ...Object.entries(objectLiteralProps).map(e => ts.createPropertyAssignment(e[0], ts.createLiteral(e[1])))
    ]));
    return ts.createDecorator(ts.createCall(ts.createIdentifier(decoratorIdentifier), undefined, argumentsArray));
};
exports.generateArrowDecorator = generateArrowDecorator;
